version: '3.7'

volumes:
  pg-backend:
  pg-sources:
  redis:
  zookeeper:
  kafka:

services:
  backend-db:
    restart: on-failure
    image: arm64v8/postgres:15.1
    profiles:
      - backend
      - backend-dev
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -U postgres -d provisioning" ]
      interval: 30s
      timeout: 60s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=provisioning
    volumes:
      - pg-backend:/var/lib/postgresql/data
    expose:
      - 5432

  redis:
    image: arm64v8/redis
    profiles:
      - redis
      - sources
      - backend
      - backend-dev
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 2s
      timeout: 2s
      retries: 10
    expose:
      - 6379
    volumes:
      - redis:/data

  zookeeper:
    user: root
    profiles:
      - kafka
    image: quay.io/strimzi/kafka:latest-kafka-3.4.1-arm64
    command:
      [
        "sh",
        "-c",
        "bin/zookeeper-server-start.sh config/zookeeper.properties"
      ]
    expose:
      - "2181"
    environment:
      LOG_DIR: /tmp/logs
    volumes:
      - zookeeper:/tmp/logs

  kafka:
    user: root
    profiles:
      - kafka
    image: quay.io/strimzi/kafka:latest-kafka-3.4.1-arm64
    command:
      [
        "sh",
        "-c",
        "bin/kafka-server-start.sh config/server.properties  --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
      ]
    expose:
      - 9092
      - 29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      LOG_DIR: "/tmp/logs"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_LISTENERS: DOCKER://kafka:29092,LOCALHOST://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:29092,LOCALHOST://localhost:9092
    ports:
      - ${EXPOSED_KAFKA_PORT:-9092}:29092
      - ${EXPOSED_KAFKA_PORT2:-29092}:29092
    volumes:
      - kafka:/tmp/logs

  init-kafka:
    user: root
    profiles:
      - kafka
    image: quay.io/strimzi/kafka:latest-kafka-3.4.1-arm64
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      bin/kafka-topics.sh --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic platform.sources.status --replication-factor 1 --partitions 1
      bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic platform.provisioning.internal.availability-check --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      bin/kafka-topics.sh --bootstrap-server kafka:29092 --list
      "
    depends_on:
      - kafka
      - zookeeper

  backend-dev:
    profiles:
      - backend-dev
    env_file:
      - ../backend.env
    depends_on:
      backend-db:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
    build:
      context: ../backend
      dockerfile: ../aarch64/Dockerfile.backend.dev
    ports:
      - ${EXPOSED_APP_PORT:-8000}:${APP_PORT:-8000}
      - ${EXPOSED_PROMETHEUS_PORT:-9000}:${PROMETHEUS_PORT:-9000}
    volumes:
      - ../backend/:/backend

  frontend-dev:
    profiles:
      - frontend-dev
    environment:
      - PROV_API_HOST=backend-dev
      - WATCHPACK_POLLING=true
    build:
      context: ../frontend
      dockerfile: ../aarch64/Dockerfile.frontend.dev
    volumes:
      - ../frontend/:/frontend
    ports:
      - ${EXPOSED_FRONTEND_DEV_PORT:-1337}:${FRONTEND_DEV_PORT:-1337}
    depends_on:
      - backend-dev

  sources-dev:
    profiles:
      - sources-dev
    build:
      context: ../sources-api-go
    ports:
      - ${EXPOSED_SOURCES_DEV_PORT:-8131}:${SOURCES_PORT:-8131}
    env_file:
      - ../sources.env
    depends_on:
      redis:
        condition: service_healthy
      sources-db:
        condition: service_healthy
  sources-db:
    restart: on-failure
    profiles:
      - sources
      - sources-dev
    image: arm64v8/postgres:15.1
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -U postgres -d sources_devel" ]
      interval: 30s
      timeout: 60s
      retries: 5
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sources_devel
    volumes:
      - pg-sources:/var/lib/postgresql/data
    expose:
      - 5432

  image-builder-frontend:
    profiles:
      - image-builder-frontend
    build:
      context: ../image-builder-frontend
      dockerfile: ./distribution/Dockerfile
    environment:
      - LOCAL_API=provisioning:8003~http~frontend-static
    depends_on:
      - frontend-static
    volumes:
      - ../image-builder-frontend/:/usr/src/app
    ports:
      - ${EXPOSED_IMAGE_BUILDER_PORT:-1337}:${IMAGE_BUILDER_PORT:-1337}
    entrypoint: [ "npm", "run", "stage-beta" ]

  frontend-static:
    profiles:
      - image-builder-frontend
    environment:
      - BETA=true
    build:
      context: ../frontend
      dockerfile: ../aarch64/Dockerfile.frontend.dev
    volumes:
      - ../frontend/:/frontend
    entrypoint: [ "npm", "run", "start:federated" ]
    ports:
      - ${EXPOSED_FRONTEND_STATIC_PORT:-8003}:${FRONTEND_STATIC_PORT:-8003}
